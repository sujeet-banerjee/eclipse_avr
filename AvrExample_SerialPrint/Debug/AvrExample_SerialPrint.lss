
AvrExample_SerialPrint.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000100  00800100  00000d30  00000dc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000aa  00800200  00800200  00000ec4  2**0
                  ALLOC
  3 .stab         00006bc4  00000000  00000000  00000ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003e6f  00000000  00000000  00007a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000b8f7  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	5c c0       	rjmp	.+184    	; 0xba <__ctors_end>
   2:	00 00       	nop
   4:	7f c0       	rjmp	.+254    	; 0x104 <__bad_interrupt>
   6:	00 00       	nop
   8:	7d c0       	rjmp	.+250    	; 0x104 <__bad_interrupt>
   a:	00 00       	nop
   c:	7b c0       	rjmp	.+246    	; 0x104 <__bad_interrupt>
   e:	00 00       	nop
  10:	79 c0       	rjmp	.+242    	; 0x104 <__bad_interrupt>
  12:	00 00       	nop
  14:	77 c0       	rjmp	.+238    	; 0x104 <__bad_interrupt>
  16:	00 00       	nop
  18:	75 c0       	rjmp	.+234    	; 0x104 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	73 c0       	rjmp	.+230    	; 0x104 <__bad_interrupt>
  1e:	00 00       	nop
  20:	71 c0       	rjmp	.+226    	; 0x104 <__bad_interrupt>
  22:	00 00       	nop
  24:	6f c0       	rjmp	.+222    	; 0x104 <__bad_interrupt>
  26:	00 00       	nop
  28:	6d c0       	rjmp	.+218    	; 0x104 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6b c0       	rjmp	.+214    	; 0x104 <__bad_interrupt>
  2e:	00 00       	nop
  30:	69 c0       	rjmp	.+210    	; 0x104 <__bad_interrupt>
  32:	00 00       	nop
  34:	67 c0       	rjmp	.+206    	; 0x104 <__bad_interrupt>
  36:	00 00       	nop
  38:	65 c0       	rjmp	.+202    	; 0x104 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	63 c0       	rjmp	.+198    	; 0x104 <__bad_interrupt>
  3e:	00 00       	nop
  40:	2a c4       	rjmp	.+2132   	; 0x896 <__vector_16>
  42:	00 00       	nop
  44:	5f c0       	rjmp	.+190    	; 0x104 <__bad_interrupt>
  46:	00 00       	nop
  48:	35 c2       	rjmp	.+1130   	; 0x4b4 <__vector_18>
  4a:	00 00       	nop
  4c:	73 c2       	rjmp	.+1254   	; 0x534 <__vector_19>
  4e:	00 00       	nop
  50:	59 c0       	rjmp	.+178    	; 0x104 <__bad_interrupt>
  52:	00 00       	nop
  54:	57 c0       	rjmp	.+174    	; 0x104 <__bad_interrupt>
  56:	00 00       	nop
  58:	55 c0       	rjmp	.+170    	; 0x104 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	53 c0       	rjmp	.+166    	; 0x104 <__bad_interrupt>
  5e:	00 00       	nop
  60:	51 c0       	rjmp	.+162    	; 0x104 <__bad_interrupt>
  62:	00 00       	nop
  64:	4f c0       	rjmp	.+158    	; 0x104 <__bad_interrupt>
	...

00000068 <digital_pin_to_timer_PGM>:
  68:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
  78:	00 00 00 00                                         ....

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
  b8:	bf 02       	muls	r27, r31

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
  c6:	12 e0       	ldi	r17, 0x02	; 2
  c8:	a0 e0       	ldi	r26, 0x00	; 0
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	e0 e3       	ldi	r30, 0x30	; 48
  ce:	fd e0       	ldi	r31, 0x0D	; 13
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
  d2:	05 90       	lpm	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	a0 30       	cpi	r26, 0x00	; 0
  d8:	b1 07       	cpc	r27, r17
  da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
  dc:	12 e0       	ldi	r17, 0x02	; 2
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b2 e0       	ldi	r27, 0x02	; 2
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
  e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
  e6:	aa 3a       	cpi	r26, 0xAA	; 170
  e8:	b1 07       	cpc	r27, r17
  ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>

000000ec <__do_global_ctors>:
  ec:	10 e0       	ldi	r17, 0x00	; 0
  ee:	ca eb       	ldi	r28, 0xBA	; 186
  f0:	d0 e0       	ldi	r29, 0x00	; 0
  f2:	03 c0       	rjmp	.+6      	; 0xfa <__do_global_ctors+0xe>
  f4:	22 97       	sbiw	r28, 0x02	; 2
  f6:	fe 01       	movw	r30, r28
  f8:	06 d6       	rcall	.+3084   	; 0xd06 <__tablejump__>
  fa:	c8 3b       	cpi	r28, 0xB8	; 184
  fc:	d1 07       	cpc	r29, r17
  fe:	d1 f7       	brne	.-12     	; 0xf4 <__do_global_ctors+0x8>
 100:	9e d0       	rcall	.+316    	; 0x23e <main>
 102:	14 c6       	rjmp	.+3112   	; 0xd2c <_exit>

00000104 <__bad_interrupt>:
 104:	7d cf       	rjmp	.-262    	; 0x0 <__vectors>

00000106 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	00 d0       	rcall	.+0      	; 0x10c <_ZN14HardwareSerial5beginEm+0x6>
 10c:	00 d0       	rcall	.+0      	; 0x10e <_ZN14HardwareSerial5beginEm+0x8>
 10e:	00 d0       	rcall	.+0      	; 0x110 <_ZN14HardwareSerial5beginEm+0xa>
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
 114:	9a 83       	std	Y+2, r25	; 0x02
 116:	89 83       	std	Y+1, r24	; 0x01
 118:	4b 83       	std	Y+3, r20	; 0x03
 11a:	5c 83       	std	Y+4, r21	; 0x04
 11c:	6d 83       	std	Y+5, r22	; 0x05
 11e:	7e 83       	std	Y+6, r23	; 0x06
 120:	8b 81       	ldd	r24, Y+3	; 0x03
 122:	9c 81       	ldd	r25, Y+4	; 0x04
 124:	ad 81       	ldd	r26, Y+5	; 0x05
 126:	be 81       	ldd	r27, Y+6	; 0x06
 128:	e9 81       	ldd	r30, Y+1	; 0x01
 12a:	fa 81       	ldd	r31, Y+2	; 0x02
 12c:	26 e0       	ldi	r18, 0x06	; 6
 12e:	ac 01       	movw	r20, r24
 130:	bd 01       	movw	r22, r26
 132:	cf 01       	movw	r24, r30
 134:	5f d1       	rcall	.+702    	; 0x3f4 <_ZN14HardwareSerial5beginEmh>
 136:	26 96       	adiw	r28, 0x06	; 6
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	f8 94       	cli
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	0f be       	out	0x3f, r0	; 63
 140:	cd bf       	out	0x3d, r28	; 61
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <setup>:
const int analogOutPin = 9; // Analog output pin that the LED is attached to

int sensorValue = 0;        // value read from the pot
int outputValue = 0;        // value output to the PWM (analog out)

void setup() {
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
  // initialize serial communications at 9600 bps:
  Serial.begin(9600);
 150:	40 e8       	ldi	r20, 0x80	; 128
 152:	55 e2       	ldi	r21, 0x25	; 37
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	84 e0       	ldi	r24, 0x04	; 4
 15a:	92 e0       	ldi	r25, 0x02	; 2
 15c:	d4 df       	rcall	.-88     	; 0x106 <_ZN14HardwareSerial5beginEm>
 15e:	df 91       	pop	r29
}
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <loop>:

void loop() {
 164:	af 92       	push	r10
 166:	bf 92       	push	r11
 168:	cf 92       	push	r12
 16a:	df 92       	push	r13
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
  // read the analog in value:
  sensorValue = analogRead(analogInPin);
 17c:	8e e0       	ldi	r24, 0x0E	; 14
 17e:	58 d4       	rcall	.+2224   	; 0xa30 <analogRead>
 180:	90 93 01 02 	sts	0x0201, r25
 184:	80 93 00 02 	sts	0x0200, r24
 188:	80 91 00 02 	lds	r24, 0x0200
  // map it to the range of the analog out:
  outputValue = map(sensorValue, 0, 1023, 0, 255);
 18c:	90 91 01 02 	lds	r25, 0x0201
 190:	aa 27       	eor	r26, r26
 192:	97 fd       	sbrc	r25, 7
 194:	a0 95       	com	r26
 196:	ba 2f       	mov	r27, r26
 198:	1f 92       	push	r1
 19a:	1f 92       	push	r1
 19c:	1f 92       	push	r1
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	2f 93       	push	r18
 1a2:	a1 2c       	mov	r10, r1
 1a4:	b1 2c       	mov	r11, r1
 1a6:	65 01       	movw	r12, r10
 1a8:	ee 24       	eor	r14, r14
 1aa:	ea 94       	dec	r14
 1ac:	13 e0       	ldi	r17, 0x03	; 3
 1ae:	f1 2e       	mov	r15, r17
 1b0:	00 e0       	ldi	r16, 0x00	; 0
 1b2:	10 e0       	ldi	r17, 0x00	; 0
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	a9 01       	movw	r20, r18
 1ba:	bc 01       	movw	r22, r24
 1bc:	cd 01       	movw	r24, r26
 1be:	26 d3       	rcall	.+1612   	; 0x80c <_Z3maplllll>
 1c0:	0f 90       	pop	r0
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	dc 01       	movw	r26, r24
 1ca:	cb 01       	movw	r24, r22
 1cc:	90 93 03 02 	sts	0x0203, r25
 1d0:	80 93 02 02 	sts	0x0202, r24
 1d4:	80 91 02 02 	lds	r24, 0x0202
  // change the analog out value:
  analogWrite(analogOutPin, outputValue);
 1d8:	90 91 03 02 	lds	r25, 0x0203
 1dc:	bc 01       	movw	r22, r24
 1de:	89 e0       	ldi	r24, 0x09	; 9
 1e0:	44 d4       	rcall	.+2184   	; 0xa6a <analogWrite>
 1e2:	69 ec       	ldi	r22, 0xC9	; 201
 1e4:	71 e0       	ldi	r23, 0x01	; 1
 1e6:	84 e0       	ldi	r24, 0x04	; 4

  // print the results to the serial monitor:
  Serial.print("sensor = ");
 1e8:	92 e0       	ldi	r25, 0x02	; 2
 1ea:	4a d2       	rcall	.+1172   	; 0x680 <_ZN5Print5printEPKc>
 1ec:	80 91 00 02 	lds	r24, 0x0200
 1f0:	90 91 01 02 	lds	r25, 0x0201
  Serial.print(sensorValue);
 1f4:	4a e0       	ldi	r20, 0x0A	; 10
 1f6:	50 e0       	ldi	r21, 0x00	; 0
 1f8:	bc 01       	movw	r22, r24
 1fa:	84 e0       	ldi	r24, 0x04	; 4
 1fc:	92 e0       	ldi	r25, 0x02	; 2
 1fe:	e9 d2       	rcall	.+1490   	; 0x7d2 <_ZN5Print5printEii>
 200:	63 ed       	ldi	r22, 0xD3	; 211
 202:	71 e0       	ldi	r23, 0x01	; 1
 204:	84 e0       	ldi	r24, 0x04	; 4
 206:	92 e0       	ldi	r25, 0x02	; 2
 208:	3b d2       	rcall	.+1142   	; 0x680 <_ZN5Print5printEPKc>
  Serial.print("\t output = ");
 20a:	80 91 02 02 	lds	r24, 0x0202
 20e:	90 91 03 02 	lds	r25, 0x0203
 212:	4a e0       	ldi	r20, 0x0A	; 10
 214:	50 e0       	ldi	r21, 0x00	; 0
  Serial.println(outputValue);
 216:	bc 01       	movw	r22, r24
 218:	84 e0       	ldi	r24, 0x04	; 4
 21a:	92 e0       	ldi	r25, 0x02	; 2
 21c:	e1 d2       	rcall	.+1474   	; 0x7e0 <_ZN5Print7printlnEii>
 21e:	62 e0       	ldi	r22, 0x02	; 2
 220:	70 e0       	ldi	r23, 0x00	; 0
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	a4 d3       	rcall	.+1864   	; 0x970 <delay>
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28

  // wait 2 milliseconds before the next loop
  // for the analog-to-digital converter to settle
  // after the last reading:
  delay(2);
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	ff 90       	pop	r15
 232:	ef 90       	pop	r14
 234:	df 90       	pop	r13
 236:	cf 90       	pop	r12
}
 238:	bf 90       	pop	r11
 23a:	af 90       	pop	r10
 23c:	08 95       	ret

0000023e <main>:

int main(void) {
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62

  init();
 246:	b9 d3       	rcall	.+1906   	; 0x9ba <init>
 248:	7f df       	rcall	.-258    	; 0x148 <setup>
  setup();
 24a:	8c df       	rcall	.-232    	; 0x164 <loop>
 24c:	fe cf       	rjmp	.-4      	; 0x24a <main+0xc>

0000024e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 24e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 250:	81 8d       	ldd	r24, Z+25	; 0x19
 252:	22 8d       	ldd	r18, Z+26	; 0x1a
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	80 5c       	subi	r24, 0xC0	; 192
 258:	9f 4f       	sbci	r25, 0xFF	; 255
 25a:	82 1b       	sub	r24, r18
 25c:	91 09       	sbc	r25, r1
}
 25e:	8f 73       	andi	r24, 0x3F	; 63
 260:	99 27       	eor	r25, r25
 262:	08 95       	ret

00000264 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 264:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 266:	91 8d       	ldd	r25, Z+25	; 0x19
 268:	82 8d       	ldd	r24, Z+26	; 0x1a
 26a:	98 17       	cp	r25, r24
 26c:	31 f0       	breq	.+12     	; 0x27a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 26e:	82 8d       	ldd	r24, Z+26	; 0x1a
 270:	e8 0f       	add	r30, r24
 272:	f1 1d       	adc	r31, r1
 274:	85 8d       	ldd	r24, Z+29	; 0x1d
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 27a:	8f ef       	ldi	r24, 0xFF	; 255
 27c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 27e:	08 95       	ret

00000280 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 280:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 282:	91 8d       	ldd	r25, Z+25	; 0x19
 284:	82 8d       	ldd	r24, Z+26	; 0x1a
 286:	98 17       	cp	r25, r24
 288:	61 f0       	breq	.+24     	; 0x2a2 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 28a:	82 8d       	ldd	r24, Z+26	; 0x1a
 28c:	df 01       	movw	r26, r30
 28e:	a8 0f       	add	r26, r24
 290:	b1 1d       	adc	r27, r1
 292:	5d 96       	adiw	r26, 0x1d	; 29
 294:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 296:	92 8d       	ldd	r25, Z+26	; 0x1a
 298:	9f 5f       	subi	r25, 0xFF	; 255
 29a:	9f 73       	andi	r25, 0x3F	; 63
 29c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 2a6:	08 95       	ret

000002a8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 2a8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 2aa:	84 8d       	ldd	r24, Z+28	; 0x1c
 2ac:	df 01       	movw	r26, r30
 2ae:	a8 0f       	add	r26, r24
 2b0:	b1 1d       	adc	r27, r1
 2b2:	a3 5a       	subi	r26, 0xA3	; 163
 2b4:	bf 4f       	sbci	r27, 0xFF	; 255
 2b6:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 2b8:	84 8d       	ldd	r24, Z+28	; 0x1c
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	8f 73       	andi	r24, 0x3F	; 63
 2c0:	99 27       	eor	r25, r25
 2c2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 2c4:	a6 89       	ldd	r26, Z+22	; 0x16
 2c6:	b7 89       	ldd	r27, Z+23	; 0x17
 2c8:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 2ca:	a0 89       	ldd	r26, Z+16	; 0x10
 2cc:	b1 89       	ldd	r27, Z+17	; 0x11
 2ce:	8c 91       	ld	r24, X
 2d0:	80 64       	ori	r24, 0x40	; 64
 2d2:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 2d4:	93 8d       	ldd	r25, Z+27	; 0x1b
 2d6:	84 8d       	ldd	r24, Z+28	; 0x1c
 2d8:	98 13       	cpse	r25, r24
 2da:	06 c0       	rjmp	.+12     	; 0x2e8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 2dc:	02 88       	ldd	r0, Z+18	; 0x12
 2de:	f3 89       	ldd	r31, Z+19	; 0x13
 2e0:	e0 2d       	mov	r30, r0
 2e2:	80 81       	ld	r24, Z
 2e4:	8f 7d       	andi	r24, 0xDF	; 223
 2e6:	80 83       	st	Z, r24
 2e8:	08 95       	ret

000002ea <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 2f0:	88 8d       	ldd	r24, Y+24	; 0x18
 2f2:	88 23       	and	r24, r24
 2f4:	c1 f0       	breq	.+48     	; 0x326 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 2f6:	ea 89       	ldd	r30, Y+18	; 0x12
 2f8:	fb 89       	ldd	r31, Y+19	; 0x13
 2fa:	80 81       	ld	r24, Z
 2fc:	85 fd       	sbrc	r24, 5
 2fe:	05 c0       	rjmp	.+10     	; 0x30a <_ZN14HardwareSerial5flushEv+0x20>
 300:	a8 89       	ldd	r26, Y+16	; 0x10
 302:	b9 89       	ldd	r27, Y+17	; 0x11
 304:	8c 91       	ld	r24, X
 306:	86 fd       	sbrc	r24, 6
 308:	0e c0       	rjmp	.+28     	; 0x326 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	07 fc       	sbrc	r0, 7
 30e:	f5 cf       	rjmp	.-22     	; 0x2fa <_ZN14HardwareSerial5flushEv+0x10>
 310:	80 81       	ld	r24, Z
 312:	85 ff       	sbrs	r24, 5
 314:	f2 cf       	rjmp	.-28     	; 0x2fa <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 316:	a8 89       	ldd	r26, Y+16	; 0x10
 318:	b9 89       	ldd	r27, Y+17	; 0x11
 31a:	8c 91       	ld	r24, X
 31c:	85 ff       	sbrs	r24, 5
 31e:	ed cf       	rjmp	.-38     	; 0x2fa <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 320:	ce 01       	movw	r24, r28
 322:	c2 df       	rcall	.-124    	; 0x2a8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 324:	e8 cf       	rjmp	.-48     	; 0x2f6 <_ZN14HardwareSerial5flushEv+0xc>
 326:	df 91       	pop	r29
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 32c:	cf 92       	push	r12
 32e:	df 92       	push	r13
 330:	ff 92       	push	r15
 332:	0f 93       	push	r16
 334:	1f 93       	push	r17
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	1f 92       	push	r1
 33c:	cd b7       	in	r28, 0x3d	; 61
 33e:	de b7       	in	r29, 0x3e	; 62
 340:	6c 01       	movw	r12, r24
  _written = true;
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	d6 01       	movw	r26, r12
 346:	58 96       	adiw	r26, 0x18	; 24
 348:	8c 93       	st	X, r24
 34a:	58 97       	sbiw	r26, 0x18	; 24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 34c:	5b 96       	adiw	r26, 0x1b	; 27
 34e:	9c 91       	ld	r25, X
 350:	5b 97       	sbiw	r26, 0x1b	; 27
 352:	5c 96       	adiw	r26, 0x1c	; 28
 354:	8c 91       	ld	r24, X
 356:	5c 97       	sbiw	r26, 0x1c	; 28
 358:	98 13       	cpse	r25, r24
 35a:	07 c0       	rjmp	.+14     	; 0x36a <_ZN14HardwareSerial5writeEh+0x3e>
 35c:	50 96       	adiw	r26, 0x10	; 16
 35e:	ed 91       	ld	r30, X+
 360:	fc 91       	ld	r31, X
 362:	51 97       	sbiw	r26, 0x11	; 17
 364:	80 81       	ld	r24, Z
 366:	85 fd       	sbrc	r24, 5
 368:	2d c0       	rjmp	.+90     	; 0x3c4 <_ZN14HardwareSerial5writeEh+0x98>
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 36a:	f6 01       	movw	r30, r12
 36c:	03 8d       	ldd	r16, Z+27	; 0x1b
 36e:	10 e0       	ldi	r17, 0x00	; 0
 370:	0f 5f       	subi	r16, 0xFF	; 255
 372:	1f 4f       	sbci	r17, 0xFF	; 255
 374:	0f 73       	andi	r16, 0x3F	; 63
 376:	11 27       	eor	r17, r17
 378:	f0 2e       	mov	r15, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 37a:	f6 01       	movw	r30, r12
 37c:	84 8d       	ldd	r24, Z+28	; 0x1c
 37e:	f8 12       	cpse	r15, r24
 380:	10 c0       	rjmp	.+32     	; 0x3a2 <_ZN14HardwareSerial5writeEh+0x76>
    if (bit_is_clear(SREG, SREG_I)) {
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	07 fc       	sbrc	r0, 7
 386:	f9 cf       	rjmp	.-14     	; 0x37a <_ZN14HardwareSerial5writeEh+0x4e>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 388:	d6 01       	movw	r26, r12
 38a:	50 96       	adiw	r26, 0x10	; 16
 38c:	ed 91       	ld	r30, X+
 38e:	fc 91       	ld	r31, X
 390:	51 97       	sbiw	r26, 0x11	; 17
 392:	80 81       	ld	r24, Z
 394:	85 ff       	sbrs	r24, 5
 396:	f1 cf       	rjmp	.-30     	; 0x37a <_ZN14HardwareSerial5writeEh+0x4e>
	_tx_udr_empty_irq();
 398:	c6 01       	movw	r24, r12
 39a:	69 83       	std	Y+1, r22	; 0x01
 39c:	85 df       	rcall	.-246    	; 0x2a8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 39e:	69 81       	ldd	r22, Y+1	; 0x01
 3a0:	ec cf       	rjmp	.-40     	; 0x37a <_ZN14HardwareSerial5writeEh+0x4e>
 3a2:	83 8d       	ldd	r24, Z+27	; 0x1b
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 3a4:	e8 0f       	add	r30, r24
 3a6:	f1 1d       	adc	r31, r1
 3a8:	e3 5a       	subi	r30, 0xA3	; 163
 3aa:	ff 4f       	sbci	r31, 0xFF	; 255
 3ac:	60 83       	st	Z, r22
 3ae:	d6 01       	movw	r26, r12
  _tx_buffer_head = i;
 3b0:	5b 96       	adiw	r26, 0x1b	; 27
 3b2:	0c 93       	st	X, r16
 3b4:	5b 97       	sbiw	r26, 0x1b	; 27
 3b6:	52 96       	adiw	r26, 0x12	; 18
	
  sbi(*_ucsrb, UDRIE0);
 3b8:	ed 91       	ld	r30, X+
 3ba:	fc 91       	ld	r31, X
 3bc:	53 97       	sbiw	r26, 0x13	; 19
 3be:	80 81       	ld	r24, Z
 3c0:	80 62       	ori	r24, 0x20	; 32
 3c2:	0c c0       	rjmp	.+24     	; 0x3dc <_ZN14HardwareSerial5writeEh+0xb0>
 3c4:	d6 01       	movw	r26, r12
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 3c6:	56 96       	adiw	r26, 0x16	; 22
 3c8:	ed 91       	ld	r30, X+
 3ca:	fc 91       	ld	r31, X
 3cc:	57 97       	sbiw	r26, 0x17	; 23
 3ce:	60 83       	st	Z, r22
 3d0:	50 96       	adiw	r26, 0x10	; 16
    sbi(*_ucsra, TXC0);
 3d2:	ed 91       	ld	r30, X+
 3d4:	fc 91       	ld	r31, X
 3d6:	51 97       	sbiw	r26, 0x11	; 17
 3d8:	80 81       	ld	r24, Z
 3da:	80 64       	ori	r24, 0x40	; 64
 3dc:	80 83       	st	Z, r24
 3de:	81 e0       	ldi	r24, 0x01	; 1
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0f 90       	pop	r0
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	1f 91       	pop	r17
 3ea:	0f 91       	pop	r16
 3ec:	ff 90       	pop	r15
 3ee:	df 90       	pop	r13
 3f0:	cf 90       	pop	r12
 3f2:	08 95       	ret

000003f4 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 3f4:	bf 92       	push	r11
 3f6:	cf 92       	push	r12
 3f8:	df 92       	push	r13
 3fa:	ef 92       	push	r14
 3fc:	ff 92       	push	r15
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	ec 01       	movw	r28, r24
 404:	6a 01       	movw	r12, r20
 406:	7b 01       	movw	r14, r22
 408:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 40a:	e8 89       	ldd	r30, Y+16	; 0x10
 40c:	f9 89       	ldd	r31, Y+17	; 0x11
 40e:	82 e0       	ldi	r24, 0x02	; 2
 410:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 412:	41 15       	cp	r20, r1
 414:	81 ee       	ldi	r24, 0xE1	; 225
 416:	58 07       	cpc	r21, r24
 418:	61 05       	cpc	r22, r1
 41a:	71 05       	cpc	r23, r1
 41c:	99 f0       	breq	.+38     	; 0x444 <_ZN14HardwareSerial5beginEmh+0x50>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	79 e0       	ldi	r23, 0x09	; 9
 422:	8d e3       	ldi	r24, 0x3D	; 61
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	a7 01       	movw	r20, r14
 428:	96 01       	movw	r18, r12
 42a:	23 d4       	rcall	.+2118   	; 0xc72 <__udivmodsi4>
 42c:	21 50       	subi	r18, 0x01	; 1
 42e:	31 09       	sbc	r19, r1
 430:	41 09       	sbc	r20, r1
 432:	51 09       	sbc	r21, r1
 434:	56 95       	lsr	r21
 436:	47 95       	ror	r20
 438:	37 95       	ror	r19
 43a:	27 95       	ror	r18
 43c:	21 15       	cp	r18, r1
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 43e:	80 e1       	ldi	r24, 0x10	; 16
 440:	38 07       	cpc	r19, r24
 442:	90 f0       	brcs	.+36     	; 0x468 <_ZN14HardwareSerial5beginEmh+0x74>
 444:	e8 89       	ldd	r30, Y+16	; 0x10
  {
    *_ucsra = 0;
 446:	f9 89       	ldd	r31, Y+17	; 0x11
 448:	10 82       	st	Z, r1
 44a:	60 e8       	ldi	r22, 0x80	; 128
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 44c:	74 e8       	ldi	r23, 0x84	; 132
 44e:	8e e1       	ldi	r24, 0x1E	; 30
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	a7 01       	movw	r20, r14
 454:	96 01       	movw	r18, r12
 456:	0d d4       	rcall	.+2074   	; 0xc72 <__udivmodsi4>
 458:	21 50       	subi	r18, 0x01	; 1
 45a:	31 09       	sbc	r19, r1
 45c:	41 09       	sbc	r20, r1
 45e:	51 09       	sbc	r21, r1
 460:	56 95       	lsr	r21
 462:	47 95       	ror	r20
 464:	37 95       	ror	r19
 466:	27 95       	ror	r18
 468:	ec 85       	ldd	r30, Y+12	; 0x0c
 46a:	fd 85       	ldd	r31, Y+13	; 0x0d
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 46c:	30 83       	st	Z, r19
 46e:	ee 85       	ldd	r30, Y+14	; 0x0e
 470:	ff 85       	ldd	r31, Y+15	; 0x0f
  *_ubrrl = baud_setting;
 472:	20 83       	st	Z, r18
 474:	18 8e       	std	Y+24, r1	; 0x18
 476:	ec 89       	ldd	r30, Y+20	; 0x14

  _written = false;
 478:	fd 89       	ldd	r31, Y+21	; 0x15

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 47a:	b0 82       	st	Z, r11
 47c:	ea 89       	ldd	r30, Y+18	; 0x12
 47e:	fb 89       	ldd	r31, Y+19	; 0x13
  
  sbi(*_ucsrb, RXEN0);
 480:	80 81       	ld	r24, Z
 482:	80 61       	ori	r24, 0x10	; 16
 484:	80 83       	st	Z, r24
 486:	ea 89       	ldd	r30, Y+18	; 0x12
 488:	fb 89       	ldd	r31, Y+19	; 0x13
  sbi(*_ucsrb, TXEN0);
 48a:	80 81       	ld	r24, Z
 48c:	88 60       	ori	r24, 0x08	; 8
 48e:	80 83       	st	Z, r24
 490:	ea 89       	ldd	r30, Y+18	; 0x12
 492:	fb 89       	ldd	r31, Y+19	; 0x13
  sbi(*_ucsrb, RXCIE0);
 494:	80 81       	ld	r24, Z
 496:	80 68       	ori	r24, 0x80	; 128
 498:	80 83       	st	Z, r24
 49a:	ea 89       	ldd	r30, Y+18	; 0x12
 49c:	fb 89       	ldd	r31, Y+19	; 0x13
  cbi(*_ucsrb, UDRIE0);
 49e:	80 81       	ld	r24, Z
 4a0:	8f 7d       	andi	r24, 0xDF	; 223
 4a2:	80 83       	st	Z, r24
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
}
 4a8:	ff 90       	pop	r15
 4aa:	ef 90       	pop	r14
 4ac:	df 90       	pop	r13
 4ae:	cf 90       	pop	r12
 4b0:	bf 90       	pop	r11
 4b2:	08 95       	ret

000004b4 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 4b4:	1f 92       	push	r1
 4b6:	0f 92       	push	r0
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	0f 92       	push	r0
 4bc:	11 24       	eor	r1, r1
 4be:	2f 93       	push	r18
 4c0:	3f 93       	push	r19
 4c2:	4f 93       	push	r20
 4c4:	5f 93       	push	r21
 4c6:	6f 93       	push	r22
 4c8:	7f 93       	push	r23
 4ca:	8f 93       	push	r24
 4cc:	9f 93       	push	r25
 4ce:	af 93       	push	r26
 4d0:	bf 93       	push	r27
 4d2:	ef 93       	push	r30
 4d4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 4d6:	e0 91 14 02 	lds	r30, 0x0214
 4da:	f0 91 15 02 	lds	r31, 0x0215
 4de:	80 81       	ld	r24, Z
 4e0:	e0 91 1a 02 	lds	r30, 0x021A
 4e4:	f0 91 1b 02 	lds	r31, 0x021B
 4e8:	82 fd       	sbrc	r24, 2
 4ea:	12 c0       	rjmp	.+36     	; 0x510 <__vector_18+0x5c>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 4ec:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 4ee:	80 91 1d 02 	lds	r24, 0x021D
 4f2:	8f 5f       	subi	r24, 0xFF	; 255
 4f4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 4f6:	20 91 1e 02 	lds	r18, 0x021E
 4fa:	82 17       	cp	r24, r18
 4fc:	51 f0       	breq	.+20     	; 0x512 <__vector_18+0x5e>
      _rx_buffer[_rx_buffer_head] = c;
 4fe:	e0 91 1d 02 	lds	r30, 0x021D
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	ec 5f       	subi	r30, 0xFC	; 252
 506:	fd 4f       	sbci	r31, 0xFD	; 253
 508:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 50a:	80 93 1d 02 	sts	0x021D, r24
 50e:	01 c0       	rjmp	.+2      	; 0x512 <__vector_18+0x5e>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 510:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 512:	ff 91       	pop	r31
 514:	ef 91       	pop	r30
 516:	bf 91       	pop	r27
 518:	af 91       	pop	r26
 51a:	9f 91       	pop	r25
 51c:	8f 91       	pop	r24
 51e:	7f 91       	pop	r23
 520:	6f 91       	pop	r22
 522:	5f 91       	pop	r21
 524:	4f 91       	pop	r20
 526:	3f 91       	pop	r19
 528:	2f 91       	pop	r18
 52a:	0f 90       	pop	r0
 52c:	0f be       	out	0x3f, r0	; 63
 52e:	0f 90       	pop	r0
 530:	1f 90       	pop	r1
 532:	18 95       	reti

00000534 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 534:	1f 92       	push	r1
 536:	0f 92       	push	r0
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	0f 92       	push	r0
 53c:	11 24       	eor	r1, r1
 53e:	2f 93       	push	r18
 540:	3f 93       	push	r19
 542:	4f 93       	push	r20
 544:	5f 93       	push	r21
 546:	6f 93       	push	r22
 548:	7f 93       	push	r23
 54a:	8f 93       	push	r24
 54c:	9f 93       	push	r25
 54e:	af 93       	push	r26
 550:	bf 93       	push	r27
 552:	ef 93       	push	r30
 554:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 556:	84 e0       	ldi	r24, 0x04	; 4
 558:	92 e0       	ldi	r25, 0x02	; 2
 55a:	a6 de       	rcall	.-692    	; 0x2a8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 55c:	ff 91       	pop	r31
}
 55e:	ef 91       	pop	r30
 560:	bf 91       	pop	r27
 562:	af 91       	pop	r26
 564:	9f 91       	pop	r25
 566:	8f 91       	pop	r24
 568:	7f 91       	pop	r23
 56a:	6f 91       	pop	r22
 56c:	5f 91       	pop	r21
 56e:	4f 91       	pop	r20
 570:	3f 91       	pop	r19
 572:	2f 91       	pop	r18
 574:	0f 90       	pop	r0
 576:	0f be       	out	0x3f, r0	; 63
 578:	0f 90       	pop	r0
 57a:	1f 90       	pop	r1
 57c:	18 95       	reti

0000057e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 57e:	10 92 07 02 	sts	0x0207, r1
 582:	10 92 06 02 	sts	0x0206, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 586:	88 ee       	ldi	r24, 0xE8	; 232
 588:	93 e0       	ldi	r25, 0x03	; 3
 58a:	a0 e0       	ldi	r26, 0x00	; 0
 58c:	b0 e0       	ldi	r27, 0x00	; 0
 58e:	80 93 08 02 	sts	0x0208, r24
 592:	90 93 09 02 	sts	0x0209, r25
 596:	a0 93 0a 02 	sts	0x020A, r26
 59a:	b0 93 0b 02 	sts	0x020B, r27
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 59e:	83 ee       	ldi	r24, 0xE3	; 227
 5a0:	91 e0       	ldi	r25, 0x01	; 1
 5a2:	90 93 05 02 	sts	0x0205, r25
 5a6:	80 93 04 02 	sts	0x0204, r24
 5aa:	85 ec       	ldi	r24, 0xC5	; 197
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	90 93 11 02 	sts	0x0211, r25
 5b2:	80 93 10 02 	sts	0x0210, r24
 5b6:	84 ec       	ldi	r24, 0xC4	; 196
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	90 93 13 02 	sts	0x0213, r25
 5be:	80 93 12 02 	sts	0x0212, r24
 5c2:	80 ec       	ldi	r24, 0xC0	; 192
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	90 93 15 02 	sts	0x0215, r25
 5ca:	80 93 14 02 	sts	0x0214, r24
 5ce:	81 ec       	ldi	r24, 0xC1	; 193
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	90 93 17 02 	sts	0x0217, r25
 5d6:	80 93 16 02 	sts	0x0216, r24
 5da:	82 ec       	ldi	r24, 0xC2	; 194
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	90 93 19 02 	sts	0x0219, r25
 5e2:	80 93 18 02 	sts	0x0218, r24
 5e6:	86 ec       	ldi	r24, 0xC6	; 198
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	90 93 1b 02 	sts	0x021B, r25
 5ee:	80 93 1a 02 	sts	0x021A, r24
 5f2:	10 92 1d 02 	sts	0x021D, r1
 5f6:	10 92 1e 02 	sts	0x021E, r1
 5fa:	10 92 1f 02 	sts	0x021F, r1
 5fe:	10 92 20 02 	sts	0x0220, r1
 602:	08 95       	ret

00000604 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 604:	cf 92       	push	r12
 606:	df 92       	push	r13
 608:	ef 92       	push	r14
 60a:	ff 92       	push	r15
 60c:	0f 93       	push	r16
 60e:	1f 93       	push	r17
 610:	cf 93       	push	r28
 612:	df 93       	push	r29
 614:	7c 01       	movw	r14, r24
 616:	6a 01       	movw	r12, r20
 618:	eb 01       	movw	r28, r22
  size_t n = 0;
 61a:	00 e0       	ldi	r16, 0x00	; 0
 61c:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
 61e:	0c 15       	cp	r16, r12
 620:	1d 05       	cpc	r17, r13
 622:	71 f0       	breq	.+28     	; 0x640 <_ZN5Print5writeEPKhj+0x3c>
    if (write(*buffer++)) n++;
 624:	69 91       	ld	r22, Y+
 626:	d7 01       	movw	r26, r14
 628:	ed 91       	ld	r30, X+
 62a:	fc 91       	ld	r31, X
 62c:	01 90       	ld	r0, Z+
 62e:	f0 81       	ld	r31, Z
 630:	e0 2d       	mov	r30, r0
 632:	c7 01       	movw	r24, r14
 634:	09 95       	icall
 636:	89 2b       	or	r24, r25
 638:	19 f0       	breq	.+6      	; 0x640 <_ZN5Print5writeEPKhj+0x3c>
 63a:	0f 5f       	subi	r16, 0xFF	; 255
 63c:	1f 4f       	sbci	r17, 0xFF	; 255
 63e:	ef cf       	rjmp	.-34     	; 0x61e <_ZN5Print5writeEPKhj+0x1a>
    else break;
  }
  return n;
}
 640:	c8 01       	movw	r24, r16
 642:	df 91       	pop	r29
 644:	cf 91       	pop	r28
 646:	1f 91       	pop	r17
 648:	0f 91       	pop	r16
 64a:	ff 90       	pop	r15
 64c:	ef 90       	pop	r14
 64e:	df 90       	pop	r13
 650:	cf 90       	pop	r12
 652:	08 95       	ret

00000654 <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 654:	61 15       	cp	r22, r1
 656:	71 05       	cpc	r23, r1
 658:	81 f0       	breq	.+32     	; 0x67a <_ZN5Print5writeEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
 65a:	db 01       	movw	r26, r22
 65c:	0d 90       	ld	r0, X+
 65e:	00 20       	and	r0, r0
 660:	e9 f7       	brne	.-6      	; 0x65c <_ZN5Print5writeEPKc+0x8>
 662:	ad 01       	movw	r20, r26
 664:	41 50       	subi	r20, 0x01	; 1
 666:	51 09       	sbc	r21, r1
 668:	46 1b       	sub	r20, r22
 66a:	57 0b       	sbc	r21, r23
 66c:	dc 01       	movw	r26, r24
 66e:	ed 91       	ld	r30, X+
 670:	fc 91       	ld	r31, X
 672:	02 80       	ldd	r0, Z+2	; 0x02
 674:	f3 81       	ldd	r31, Z+3	; 0x03
 676:	e0 2d       	mov	r30, r0
 678:	09 94       	ijmp
    }
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	08 95       	ret

00000680 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 680:	e9 cf       	rjmp	.-46     	; 0x654 <_ZN5Print5writeEPKc>

00000682 <_ZN5Print5printEc>:
}

size_t Print::print(char c)
{
  return write(c);
 682:	dc 01       	movw	r26, r24
 684:	ed 91       	ld	r30, X+
 686:	fc 91       	ld	r31, X
 688:	01 90       	ld	r0, Z+
 68a:	f0 81       	ld	r31, Z
 68c:	e0 2d       	mov	r30, r0
 68e:	09 94       	ijmp

00000690 <_ZN5Print7printlnEv>:
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
 690:	6f ee       	ldi	r22, 0xEF	; 239
 692:	71 e0       	ldi	r23, 0x01	; 1
 694:	df cf       	rjmp	.-66     	; 0x654 <_ZN5Print5writeEPKc>

00000696 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 696:	8f 92       	push	r8
 698:	9f 92       	push	r9
 69a:	af 92       	push	r10
 69c:	bf 92       	push	r11
 69e:	cf 92       	push	r12
 6a0:	df 92       	push	r13
 6a2:	ef 92       	push	r14
 6a4:	ff 92       	push	r15
 6a6:	0f 93       	push	r16
 6a8:	1f 93       	push	r17
 6aa:	cf 93       	push	r28
 6ac:	df 93       	push	r29
 6ae:	cd b7       	in	r28, 0x3d	; 61
 6b0:	de b7       	in	r29, 0x3e	; 62
 6b2:	a1 97       	sbiw	r28, 0x21	; 33
 6b4:	0f b6       	in	r0, 0x3f	; 63
 6b6:	f8 94       	cli
 6b8:	de bf       	out	0x3e, r29	; 62
 6ba:	0f be       	out	0x3f, r0	; 63
 6bc:	cd bf       	out	0x3d, r28	; 61
 6be:	7c 01       	movw	r14, r24
 6c0:	c4 2e       	mov	r12, r20
 6c2:	e5 2f       	mov	r30, r21
 6c4:	cb 01       	movw	r24, r22
 6c6:	d2 2e       	mov	r13, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 6c8:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 6ca:	21 e0       	ldi	r18, 0x01	; 1
 6cc:	2d 15       	cp	r18, r13
 6ce:	10 f0       	brcs	.+4      	; 0x6d4 <_ZN5Print11printNumberEmh+0x3e>
 6d0:	2a e0       	ldi	r18, 0x0A	; 10
 6d2:	d2 2e       	mov	r13, r18
 6d4:	8e 01       	movw	r16, r28
 6d6:	0f 5d       	subi	r16, 0xDF	; 223
 6d8:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
 6da:	8d 2c       	mov	r8, r13
 6dc:	91 2c       	mov	r9, r1
 6de:	a1 2c       	mov	r10, r1
 6e0:	b1 2c       	mov	r11, r1
 6e2:	6c 2d       	mov	r22, r12
 6e4:	7e 2f       	mov	r23, r30
 6e6:	a5 01       	movw	r20, r10
 6e8:	94 01       	movw	r18, r8
 6ea:	c3 d2       	rcall	.+1414   	; 0xc72 <__udivmodsi4>
 6ec:	8c 2d       	mov	r24, r12
    char c = m - base * n;
 6ee:	d2 9e       	mul	r13, r18
 6f0:	80 19       	sub	r24, r0
 6f2:	11 24       	eor	r1, r1
 6f4:	01 50       	subi	r16, 0x01	; 1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 6f6:	11 09       	sbc	r17, r1
 6f8:	8a 30       	cpi	r24, 0x0A	; 10
 6fa:	10 f4       	brcc	.+4      	; 0x700 <_ZN5Print11printNumberEmh+0x6a>
 6fc:	80 5d       	subi	r24, 0xD0	; 208
 6fe:	01 c0       	rjmp	.+2      	; 0x702 <_ZN5Print11printNumberEmh+0x6c>
 700:	89 5c       	subi	r24, 0xC9	; 201
 702:	f8 01       	movw	r30, r16
 704:	80 83       	st	Z, r24
 706:	21 15       	cp	r18, r1
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 708:	31 05       	cpc	r19, r1
 70a:	41 05       	cpc	r20, r1
 70c:	51 05       	cpc	r21, r1
 70e:	21 f0       	breq	.+8      	; 0x718 <_ZN5Print11printNumberEmh+0x82>
 710:	c2 2e       	mov	r12, r18
    unsigned long m = n;
    n /= base;
 712:	e3 2f       	mov	r30, r19
 714:	ca 01       	movw	r24, r20
 716:	e5 cf       	rjmp	.-54     	; 0x6e2 <_ZN5Print11printNumberEmh+0x4c>
 718:	b8 01       	movw	r22, r16
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 71a:	c7 01       	movw	r24, r14
 71c:	9b df       	rcall	.-202    	; 0x654 <_ZN5Print5writeEPKc>
 71e:	a1 96       	adiw	r28, 0x21	; 33
 720:	0f b6       	in	r0, 0x3f	; 63
}
 722:	f8 94       	cli
 724:	de bf       	out	0x3e, r29	; 62
 726:	0f be       	out	0x3f, r0	; 63
 728:	cd bf       	out	0x3d, r28	; 61
 72a:	df 91       	pop	r29
 72c:	cf 91       	pop	r28
 72e:	1f 91       	pop	r17
 730:	0f 91       	pop	r16
 732:	ff 90       	pop	r15
 734:	ef 90       	pop	r14
 736:	df 90       	pop	r13
 738:	cf 90       	pop	r12
 73a:	bf 90       	pop	r11
 73c:	af 90       	pop	r10
 73e:	9f 90       	pop	r9
 740:	8f 90       	pop	r8
 742:	08 95       	ret

00000744 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 744:	cf 92       	push	r12
 746:	df 92       	push	r13
 748:	ef 92       	push	r14
 74a:	ff 92       	push	r15
 74c:	0f 93       	push	r16
 74e:	1f 93       	push	r17
 750:	cf 93       	push	r28
 752:	df 93       	push	r29
 754:	ec 01       	movw	r28, r24
 756:	6a 01       	movw	r12, r20
 758:	7b 01       	movw	r14, r22
  if (base == 0) {
 75a:	21 15       	cp	r18, r1
 75c:	31 05       	cpc	r19, r1
 75e:	79 f4       	brne	.+30     	; 0x77e <_ZN5Print5printEli+0x3a>
    return write(n);
 760:	e8 81       	ld	r30, Y
 762:	f9 81       	ldd	r31, Y+1	; 0x01
 764:	01 90       	ld	r0, Z+
 766:	f0 81       	ld	r31, Z
 768:	e0 2d       	mov	r30, r0
 76a:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 76c:	df 91       	pop	r29
 76e:	cf 91       	pop	r28
 770:	1f 91       	pop	r17
 772:	0f 91       	pop	r16
 774:	ff 90       	pop	r15
 776:	ef 90       	pop	r14
 778:	df 90       	pop	r13
 77a:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 77c:	09 94       	ijmp
  } else if (base == 10) {
 77e:	2a 30       	cpi	r18, 0x0A	; 10
 780:	31 05       	cpc	r19, r1
 782:	d9 f4       	brne	.+54     	; 0x7ba <_ZN5Print5printEli+0x76>
    if (n < 0) {
 784:	77 ff       	sbrs	r23, 7
 786:	18 c0       	rjmp	.+48     	; 0x7b8 <_ZN5Print5printEli+0x74>
      int t = print('-');
 788:	6d e2       	ldi	r22, 0x2D	; 45
 78a:	7b df       	rcall	.-266    	; 0x682 <_ZN5Print5printEc>
 78c:	8c 01       	movw	r16, r24
 78e:	44 27       	eor	r20, r20
      n = -n;
 790:	55 27       	eor	r21, r21
 792:	ba 01       	movw	r22, r20
 794:	4c 19       	sub	r20, r12
 796:	5d 09       	sbc	r21, r13
 798:	6e 09       	sbc	r22, r14
 79a:	7f 09       	sbc	r23, r15
 79c:	2a e0       	ldi	r18, 0x0A	; 10
      return printNumber(n, 10) + t;
 79e:	ce 01       	movw	r24, r28
 7a0:	7a df       	rcall	.-268    	; 0x696 <_ZN5Print11printNumberEmh>
 7a2:	80 0f       	add	r24, r16
 7a4:	91 1f       	adc	r25, r17
 7a6:	df 91       	pop	r29
 7a8:	cf 91       	pop	r28
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 7aa:	1f 91       	pop	r17
 7ac:	0f 91       	pop	r16
 7ae:	ff 90       	pop	r15
 7b0:	ef 90       	pop	r14
 7b2:	df 90       	pop	r13
 7b4:	cf 90       	pop	r12
 7b6:	08 95       	ret
 7b8:	2a e0       	ldi	r18, 0x0A	; 10
 7ba:	b7 01       	movw	r22, r14
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 7bc:	a6 01       	movw	r20, r12
  } else {
    return printNumber(n, base);
 7be:	ce 01       	movw	r24, r28
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
  }
}
 7c4:	1f 91       	pop	r17
 7c6:	0f 91       	pop	r16
 7c8:	ff 90       	pop	r15
 7ca:	ef 90       	pop	r14
 7cc:	df 90       	pop	r13
 7ce:	cf 90       	pop	r12
 7d0:	62 cf       	rjmp	.-316    	; 0x696 <_ZN5Print11printNumberEmh>

000007d2 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 7d2:	9a 01       	movw	r18, r20
  return print((long) n, base);
 7d4:	ab 01       	movw	r20, r22
 7d6:	66 27       	eor	r22, r22
 7d8:	57 fd       	sbrc	r21, 7
 7da:	60 95       	com	r22
 7dc:	76 2f       	mov	r23, r22
 7de:	b2 cf       	rjmp	.-156    	; 0x744 <_ZN5Print5printEli>

000007e0 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 7e0:	0f 93       	push	r16
 7e2:	1f 93       	push	r17
 7e4:	cf 93       	push	r28
 7e6:	df 93       	push	r29
 7e8:	ec 01       	movw	r28, r24
 7ea:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 7ec:	ab 01       	movw	r20, r22
 7ee:	66 27       	eor	r22, r22
 7f0:	57 fd       	sbrc	r21, 7
 7f2:	60 95       	com	r22
 7f4:	76 2f       	mov	r23, r22
 7f6:	a6 df       	rcall	.-180    	; 0x744 <_ZN5Print5printEli>
 7f8:	8c 01       	movw	r16, r24
 7fa:	ce 01       	movw	r24, r28
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 7fc:	49 df       	rcall	.-366    	; 0x690 <_ZN5Print7printlnEv>
 7fe:	80 0f       	add	r24, r16
 800:	91 1f       	adc	r25, r17
  return n;
}
 802:	df 91       	pop	r29
 804:	cf 91       	pop	r28
 806:	1f 91       	pop	r17
 808:	0f 91       	pop	r16
 80a:	08 95       	ret

0000080c <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 80c:	4f 92       	push	r4
 80e:	5f 92       	push	r5
 810:	6f 92       	push	r6
 812:	7f 92       	push	r7
 814:	af 92       	push	r10
 816:	bf 92       	push	r11
 818:	cf 92       	push	r12
 81a:	df 92       	push	r13
 81c:	ef 92       	push	r14
 81e:	ff 92       	push	r15
 820:	0f 93       	push	r16
 822:	1f 93       	push	r17
 824:	cf 93       	push	r28
 826:	df 93       	push	r29
 828:	cd b7       	in	r28, 0x3d	; 61
 82a:	de b7       	in	r29, 0x3e	; 62
 82c:	29 01       	movw	r4, r18
 82e:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 830:	62 1b       	sub	r22, r18
 832:	73 0b       	sbc	r23, r19
 834:	84 0b       	sbc	r24, r20
 836:	95 0b       	sbc	r25, r21
 838:	29 89       	ldd	r18, Y+17	; 0x11
 83a:	3a 89       	ldd	r19, Y+18	; 0x12
 83c:	4b 89       	ldd	r20, Y+19	; 0x13
 83e:	5c 89       	ldd	r21, Y+20	; 0x14
 840:	2a 19       	sub	r18, r10
 842:	3b 09       	sbc	r19, r11
 844:	4c 09       	sbc	r20, r12
 846:	5d 09       	sbc	r21, r13
 848:	29 8b       	std	Y+17, r18	; 0x11
 84a:	3a 8b       	std	Y+18, r19	; 0x12
 84c:	4b 8b       	std	Y+19, r20	; 0x13
 84e:	5c 8b       	std	Y+20, r21	; 0x14
 850:	9b 01       	movw	r18, r22
 852:	ac 01       	movw	r20, r24
 854:	69 89       	ldd	r22, Y+17	; 0x11
 856:	7a 89       	ldd	r23, Y+18	; 0x12
 858:	8b 89       	ldd	r24, Y+19	; 0x13
 85a:	9c 89       	ldd	r25, Y+20	; 0x14
 85c:	fb d1       	rcall	.+1014   	; 0xc54 <__mulsi3>
 85e:	e4 18       	sub	r14, r4
 860:	f5 08       	sbc	r15, r5
 862:	06 09       	sbc	r16, r6
 864:	17 09       	sbc	r17, r7
 866:	a8 01       	movw	r20, r16
 868:	97 01       	movw	r18, r14
 86a:	25 d2       	rcall	.+1098   	; 0xcb6 <__divmodsi4>
 86c:	2a 0d       	add	r18, r10
 86e:	3b 1d       	adc	r19, r11
 870:	4c 1d       	adc	r20, r12
 872:	5d 1d       	adc	r21, r13
 874:	ca 01       	movw	r24, r20
 876:	b9 01       	movw	r22, r18
}
 878:	df 91       	pop	r29
 87a:	cf 91       	pop	r28
 87c:	1f 91       	pop	r17
 87e:	0f 91       	pop	r16
 880:	ff 90       	pop	r15
 882:	ef 90       	pop	r14
 884:	df 90       	pop	r13
 886:	cf 90       	pop	r12
 888:	bf 90       	pop	r11
 88a:	af 90       	pop	r10
 88c:	7f 90       	pop	r7
 88e:	6f 90       	pop	r6
 890:	5f 90       	pop	r5
 892:	4f 90       	pop	r4
 894:	08 95       	ret

00000896 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 896:	1f 92       	push	r1
 898:	0f 92       	push	r0
 89a:	0f b6       	in	r0, 0x3f	; 63
 89c:	0f 92       	push	r0
 89e:	11 24       	eor	r1, r1
 8a0:	2f 93       	push	r18
 8a2:	3f 93       	push	r19
 8a4:	8f 93       	push	r24
 8a6:	9f 93       	push	r25
 8a8:	af 93       	push	r26
 8aa:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 8ac:	80 91 a2 02 	lds	r24, 0x02A2
 8b0:	90 91 a3 02 	lds	r25, 0x02A3
 8b4:	a0 91 a4 02 	lds	r26, 0x02A4
 8b8:	b0 91 a5 02 	lds	r27, 0x02A5
	unsigned char f = timer0_fract;
 8bc:	30 91 a1 02 	lds	r19, 0x02A1

	m += MILLIS_INC;
	f += FRACT_INC;
 8c0:	23 e0       	ldi	r18, 0x03	; 3
 8c2:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 8c4:	2d 37       	cpi	r18, 0x7D	; 125
 8c6:	20 f4       	brcc	.+8      	; 0x8d0 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 8c8:	01 96       	adiw	r24, 0x01	; 1
 8ca:	a1 1d       	adc	r26, r1
 8cc:	b1 1d       	adc	r27, r1
 8ce:	05 c0       	rjmp	.+10     	; 0x8da <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 8d0:	26 e8       	ldi	r18, 0x86	; 134
 8d2:	23 0f       	add	r18, r19
		m += 1;
 8d4:	02 96       	adiw	r24, 0x02	; 2
 8d6:	a1 1d       	adc	r26, r1
 8d8:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 8da:	20 93 a1 02 	sts	0x02A1, r18
	timer0_millis = m;
 8de:	80 93 a2 02 	sts	0x02A2, r24
 8e2:	90 93 a3 02 	sts	0x02A3, r25
 8e6:	a0 93 a4 02 	sts	0x02A4, r26
 8ea:	b0 93 a5 02 	sts	0x02A5, r27
	timer0_overflow_count++;
 8ee:	80 91 a6 02 	lds	r24, 0x02A6
 8f2:	90 91 a7 02 	lds	r25, 0x02A7
 8f6:	a0 91 a8 02 	lds	r26, 0x02A8
 8fa:	b0 91 a9 02 	lds	r27, 0x02A9
 8fe:	01 96       	adiw	r24, 0x01	; 1
 900:	a1 1d       	adc	r26, r1
 902:	b1 1d       	adc	r27, r1
 904:	80 93 a6 02 	sts	0x02A6, r24
 908:	90 93 a7 02 	sts	0x02A7, r25
 90c:	a0 93 a8 02 	sts	0x02A8, r26
 910:	b0 93 a9 02 	sts	0x02A9, r27
}
 914:	bf 91       	pop	r27
 916:	af 91       	pop	r26
 918:	9f 91       	pop	r25
 91a:	8f 91       	pop	r24
 91c:	3f 91       	pop	r19
 91e:	2f 91       	pop	r18
 920:	0f 90       	pop	r0
 922:	0f be       	out	0x3f, r0	; 63
 924:	0f 90       	pop	r0
 926:	1f 90       	pop	r1
 928:	18 95       	reti

0000092a <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 92a:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 92c:	f8 94       	cli
	m = timer0_overflow_count;
 92e:	80 91 a6 02 	lds	r24, 0x02A6
 932:	90 91 a7 02 	lds	r25, 0x02A7
 936:	a0 91 a8 02 	lds	r26, 0x02A8
 93a:	b0 91 a9 02 	lds	r27, 0x02A9
#if defined(TCNT0)
	t = TCNT0;
 93e:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 940:	a8 9b       	sbis	0x15, 0	; 21
 942:	05 c0       	rjmp	.+10     	; 0x94e <micros+0x24>
 944:	2f 3f       	cpi	r18, 0xFF	; 255
 946:	19 f0       	breq	.+6      	; 0x94e <micros+0x24>
		m++;
 948:	01 96       	adiw	r24, 0x01	; 1
 94a:	a1 1d       	adc	r26, r1
 94c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 94e:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 950:	66 27       	eor	r22, r22
 952:	78 2f       	mov	r23, r24
 954:	89 2f       	mov	r24, r25
 956:	9a 2f       	mov	r25, r26
 958:	62 0f       	add	r22, r18
 95a:	71 1d       	adc	r23, r1
 95c:	81 1d       	adc	r24, r1
 95e:	91 1d       	adc	r25, r1
 960:	42 e0       	ldi	r20, 0x02	; 2
 962:	66 0f       	add	r22, r22
 964:	77 1f       	adc	r23, r23
 966:	88 1f       	adc	r24, r24
 968:	99 1f       	adc	r25, r25
 96a:	4a 95       	dec	r20
 96c:	d1 f7       	brne	.-12     	; 0x962 <micros+0x38>
}
 96e:	08 95       	ret

00000970 <delay>:

void delay(unsigned long ms)
{
 970:	cf 92       	push	r12
 972:	df 92       	push	r13
 974:	ef 92       	push	r14
 976:	ff 92       	push	r15
 978:	cf 93       	push	r28
 97a:	df 93       	push	r29
 97c:	6b 01       	movw	r12, r22
 97e:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
 980:	d4 df       	rcall	.-88     	; 0x92a <micros>
 982:	eb 01       	movw	r28, r22
 984:	c1 14       	cp	r12, r1

	while (ms > 0) {
 986:	d1 04       	cpc	r13, r1
 988:	e1 04       	cpc	r14, r1
 98a:	f1 04       	cpc	r15, r1
 98c:	79 f0       	breq	.+30     	; 0x9ac <delay+0x3c>
 98e:	61 d1       	rcall	.+706    	; 0xc52 <yield>
		yield();
 990:	cc df       	rcall	.-104    	; 0x92a <micros>
 992:	6c 1b       	sub	r22, r28
		if (((uint16_t)micros() - start) >= 1000) {
 994:	7d 0b       	sbc	r23, r29
 996:	68 3e       	cpi	r22, 0xE8	; 232
 998:	73 40       	sbci	r23, 0x03	; 3
 99a:	a0 f3       	brcs	.-24     	; 0x984 <delay+0x14>
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	c8 1a       	sub	r12, r24
 9a0:	d1 08       	sbc	r13, r1
			ms--;
 9a2:	e1 08       	sbc	r14, r1
 9a4:	f1 08       	sbc	r15, r1
 9a6:	c8 51       	subi	r28, 0x18	; 24
 9a8:	dc 4f       	sbci	r29, 0xFC	; 252
 9aa:	ec cf       	rjmp	.-40     	; 0x984 <delay+0x14>
			start += 1000;
 9ac:	df 91       	pop	r29
 9ae:	cf 91       	pop	r28
 9b0:	ff 90       	pop	r15
		}
	}
}
 9b2:	ef 90       	pop	r14
 9b4:	df 90       	pop	r13
 9b6:	cf 90       	pop	r12
 9b8:	08 95       	ret

000009ba <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 9ba:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 9bc:	84 b5       	in	r24, 0x24	; 36
 9be:	82 60       	ori	r24, 0x02	; 2
 9c0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 9c2:	84 b5       	in	r24, 0x24	; 36
 9c4:	81 60       	ori	r24, 0x01	; 1
 9c6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 9c8:	85 b5       	in	r24, 0x25	; 37
 9ca:	82 60       	ori	r24, 0x02	; 2
 9cc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 9ce:	85 b5       	in	r24, 0x25	; 37
 9d0:	81 60       	ori	r24, 0x01	; 1
 9d2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 9d4:	ee e6       	ldi	r30, 0x6E	; 110
 9d6:	f0 e0       	ldi	r31, 0x00	; 0
 9d8:	80 81       	ld	r24, Z
 9da:	81 60       	ori	r24, 0x01	; 1
 9dc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 9de:	e1 e8       	ldi	r30, 0x81	; 129
 9e0:	f0 e0       	ldi	r31, 0x00	; 0
 9e2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 9e4:	80 81       	ld	r24, Z
 9e6:	82 60       	ori	r24, 0x02	; 2
 9e8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 9ea:	80 81       	ld	r24, Z
 9ec:	81 60       	ori	r24, 0x01	; 1
 9ee:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 9f0:	e0 e8       	ldi	r30, 0x80	; 128
 9f2:	f0 e0       	ldi	r31, 0x00	; 0
 9f4:	80 81       	ld	r24, Z
 9f6:	81 60       	ori	r24, 0x01	; 1
 9f8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 9fa:	e1 eb       	ldi	r30, 0xB1	; 177
 9fc:	f0 e0       	ldi	r31, 0x00	; 0
 9fe:	80 81       	ld	r24, Z
 a00:	84 60       	ori	r24, 0x04	; 4
 a02:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 a04:	e0 eb       	ldi	r30, 0xB0	; 176
 a06:	f0 e0       	ldi	r31, 0x00	; 0
 a08:	80 81       	ld	r24, Z
 a0a:	81 60       	ori	r24, 0x01	; 1
 a0c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 a0e:	ea e7       	ldi	r30, 0x7A	; 122
 a10:	f0 e0       	ldi	r31, 0x00	; 0
 a12:	80 81       	ld	r24, Z
 a14:	84 60       	ori	r24, 0x04	; 4
 a16:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 a18:	80 81       	ld	r24, Z
 a1a:	82 60       	ori	r24, 0x02	; 2
 a1c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 a1e:	80 81       	ld	r24, Z
 a20:	81 60       	ori	r24, 0x01	; 1
 a22:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 a24:	80 81       	ld	r24, Z
 a26:	80 68       	ori	r24, 0x80	; 128
 a28:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 a2a:	10 92 c1 00 	sts	0x00C1, r1
 a2e:	08 95       	ret

00000a30 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
 a30:	8e 30       	cpi	r24, 0x0E	; 14
 a32:	08 f0       	brcs	.+2      	; 0xa36 <analogRead+0x6>
 a34:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
 a36:	87 70       	andi	r24, 0x07	; 7
 a38:	20 91 c8 01 	lds	r18, 0x01C8
 a3c:	90 e4       	ldi	r25, 0x40	; 64
 a3e:	29 9f       	mul	r18, r25
 a40:	90 01       	movw	r18, r0
 a42:	11 24       	eor	r1, r1
 a44:	82 2b       	or	r24, r18
 a46:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
 a4a:	80 91 7a 00 	lds	r24, 0x007A
 a4e:	80 64       	ori	r24, 0x40	; 64
 a50:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
 a54:	80 91 7a 00 	lds	r24, 0x007A
 a58:	86 fd       	sbrc	r24, 6
 a5a:	fc cf       	rjmp	.-8      	; 0xa54 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
 a5c:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
 a60:	20 91 79 00 	lds	r18, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
 a64:	90 e0       	ldi	r25, 0x00	; 0
}
 a66:	92 2b       	or	r25, r18
 a68:	08 95       	ret

00000a6a <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
 a6a:	1f 93       	push	r17
 a6c:	cf 93       	push	r28
 a6e:	df 93       	push	r29
 a70:	18 2f       	mov	r17, r24
 a72:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
 a74:	61 e0       	ldi	r22, 0x01	; 1
 a76:	7f d0       	rcall	.+254    	; 0xb76 <pinMode>
 a78:	20 97       	sbiw	r28, 0x00	; 0
	if (val == 0)
 a7a:	11 f4       	brne	.+4      	; 0xa80 <analogWrite+0x16>
 a7c:	60 e0       	ldi	r22, 0x00	; 0
	{
		digitalWrite(pin, LOW);
 a7e:	04 c0       	rjmp	.+8      	; 0xa88 <analogWrite+0x1e>
 a80:	cf 3f       	cpi	r28, 0xFF	; 255
	}
	else if (val == 255)
 a82:	d1 05       	cpc	r29, r1
 a84:	31 f4       	brne	.+12     	; 0xa92 <analogWrite+0x28>
 a86:	61 e0       	ldi	r22, 0x01	; 1
	{
		digitalWrite(pin, HIGH);
 a88:	81 2f       	mov	r24, r17
 a8a:	df 91       	pop	r29
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
 a8c:	cf 91       	pop	r28
 a8e:	1f 91       	pop	r17
 a90:	ab c0       	rjmp	.+342    	; 0xbe8 <digitalWrite>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
 a92:	e1 2f       	mov	r30, r17
 a94:	f0 e0       	ldi	r31, 0x00	; 0
	}
	else
	{
		switch(digitalPinToTimer(pin))
 a96:	e8 59       	subi	r30, 0x98	; 152
 a98:	ff 4f       	sbci	r31, 0xFF	; 255
 a9a:	e4 91       	lpm	r30, Z
 a9c:	e3 30       	cpi	r30, 0x03	; 3
 a9e:	f9 f0       	breq	.+62     	; 0xade <analogWrite+0x74>
 aa0:	48 f4       	brcc	.+18     	; 0xab4 <analogWrite+0x4a>
 aa2:	e1 30       	cpi	r30, 0x01	; 1
 aa4:	b9 f0       	breq	.+46     	; 0xad4 <analogWrite+0x6a>
 aa6:	e2 30       	cpi	r30, 0x02	; 2
 aa8:	a1 f5       	brne	.+104    	; 0xb12 <analogWrite+0xa8>
 aaa:	84 b5       	in	r24, 0x24	; 36
 aac:	80 62       	ori	r24, 0x20	; 32
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
 aae:	84 bd       	out	0x24, r24	; 36
 ab0:	c8 bd       	out	0x28, r28	; 40
 ab2:	34 c0       	rjmp	.+104    	; 0xb1c <analogWrite+0xb2>
				OCR0B = val; // set pwm duty
 ab4:	e7 30       	cpi	r30, 0x07	; 7
				break;
 ab6:	e9 f0       	breq	.+58     	; 0xaf2 <analogWrite+0x88>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
 ab8:	e8 30       	cpi	r30, 0x08	; 8
 aba:	19 f1       	breq	.+70     	; 0xb02 <analogWrite+0x98>
 abc:	e4 30       	cpi	r30, 0x04	; 4
 abe:	49 f5       	brne	.+82     	; 0xb12 <analogWrite+0xa8>
 ac0:	80 91 80 00 	lds	r24, 0x0080
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
 ac4:	80 62       	ori	r24, 0x20	; 32
 ac6:	80 93 80 00 	sts	0x0080, r24
 aca:	d0 93 8b 00 	sts	0x008B, r29
				OCR1B = val; // set pwm duty
 ace:	c0 93 8a 00 	sts	0x008A, r28
 ad2:	24 c0       	rjmp	.+72     	; 0xb1c <analogWrite+0xb2>
 ad4:	84 b5       	in	r24, 0x24	; 36
				break;
 ad6:	80 68       	ori	r24, 0x80	; 128
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
 ad8:	84 bd       	out	0x24, r24	; 36
 ada:	c7 bd       	out	0x27, r28	; 39
 adc:	1f c0       	rjmp	.+62     	; 0xb1c <analogWrite+0xb2>
				OCR0A = val; // set pwm duty
 ade:	80 91 80 00 	lds	r24, 0x0080
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
 ae2:	80 68       	ori	r24, 0x80	; 128
 ae4:	80 93 80 00 	sts	0x0080, r24
 ae8:	d0 93 89 00 	sts	0x0089, r29
				OCR1A = val; // set pwm duty
 aec:	c0 93 88 00 	sts	0x0088, r28
 af0:	15 c0       	rjmp	.+42     	; 0xb1c <analogWrite+0xb2>
 af2:	80 91 b0 00 	lds	r24, 0x00B0
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
 af6:	80 68       	ori	r24, 0x80	; 128
 af8:	80 93 b0 00 	sts	0x00B0, r24
 afc:	c0 93 b3 00 	sts	0x00B3, r28
				OCR2A = val; // set pwm duty
 b00:	0d c0       	rjmp	.+26     	; 0xb1c <analogWrite+0xb2>
 b02:	80 91 b0 00 	lds	r24, 0x00B0
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
 b06:	80 62       	ori	r24, 0x20	; 32
 b08:	80 93 b0 00 	sts	0x00B0, r24
 b0c:	c0 93 b4 00 	sts	0x00B4, r28
				OCR2B = val; // set pwm duty
 b10:	05 c0       	rjmp	.+10     	; 0xb1c <analogWrite+0xb2>
 b12:	c0 38       	cpi	r28, 0x80	; 128
				break;
 b14:	d1 05       	cpc	r29, r1
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
 b16:	0c f0       	brlt	.+2      	; 0xb1a <analogWrite+0xb0>
 b18:	b6 cf       	rjmp	.-148    	; 0xa86 <analogWrite+0x1c>
 b1a:	b0 cf       	rjmp	.-160    	; 0xa7c <analogWrite+0x12>
 b1c:	df 91       	pop	r29
 b1e:	cf 91       	pop	r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
 b20:	1f 91       	pop	r17
 b22:	08 95       	ret

00000b24 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 b24:	83 30       	cpi	r24, 0x03	; 3
 b26:	81 f0       	breq	.+32     	; 0xb48 <turnOffPWM+0x24>
 b28:	28 f4       	brcc	.+10     	; 0xb34 <turnOffPWM+0x10>
 b2a:	81 30       	cpi	r24, 0x01	; 1
 b2c:	99 f0       	breq	.+38     	; 0xb54 <turnOffPWM+0x30>
 b2e:	82 30       	cpi	r24, 0x02	; 2
 b30:	a1 f0       	breq	.+40     	; 0xb5a <turnOffPWM+0x36>
 b32:	08 95       	ret
 b34:	87 30       	cpi	r24, 0x07	; 7
 b36:	a9 f0       	breq	.+42     	; 0xb62 <turnOffPWM+0x3e>
 b38:	88 30       	cpi	r24, 0x08	; 8
 b3a:	b9 f0       	breq	.+46     	; 0xb6a <turnOffPWM+0x46>
 b3c:	84 30       	cpi	r24, 0x04	; 4
 b3e:	d1 f4       	brne	.+52     	; 0xb74 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 b40:	80 91 80 00 	lds	r24, 0x0080
 b44:	8f 7d       	andi	r24, 0xDF	; 223
 b46:	03 c0       	rjmp	.+6      	; 0xb4e <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 b48:	80 91 80 00 	lds	r24, 0x0080
 b4c:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 b4e:	80 93 80 00 	sts	0x0080, r24
 b52:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 b54:	84 b5       	in	r24, 0x24	; 36
 b56:	8f 77       	andi	r24, 0x7F	; 127
 b58:	02 c0       	rjmp	.+4      	; 0xb5e <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 b5a:	84 b5       	in	r24, 0x24	; 36
 b5c:	8f 7d       	andi	r24, 0xDF	; 223
 b5e:	84 bd       	out	0x24, r24	; 36
 b60:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 b62:	80 91 b0 00 	lds	r24, 0x00B0
 b66:	8f 77       	andi	r24, 0x7F	; 127
 b68:	03 c0       	rjmp	.+6      	; 0xb70 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 b6a:	80 91 b0 00 	lds	r24, 0x00B0
 b6e:	8f 7d       	andi	r24, 0xDF	; 223
 b70:	80 93 b0 00 	sts	0x00B0, r24
 b74:	08 95       	ret

00000b76 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 b76:	cf 93       	push	r28
 b78:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	fc 01       	movw	r30, r24
 b7e:	e4 58       	subi	r30, 0x84	; 132
 b80:	ff 4f       	sbci	r31, 0xFF	; 255
 b82:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 b84:	fc 01       	movw	r30, r24
 b86:	e0 57       	subi	r30, 0x70	; 112
 b88:	ff 4f       	sbci	r31, 0xFF	; 255
 b8a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 b8c:	88 23       	and	r24, r24
 b8e:	49 f1       	breq	.+82     	; 0xbe2 <pinMode+0x6c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	88 0f       	add	r24, r24
 b94:	99 1f       	adc	r25, r25
 b96:	fc 01       	movw	r30, r24
 b98:	e2 55       	subi	r30, 0x52	; 82
 b9a:	ff 4f       	sbci	r31, 0xFF	; 255
 b9c:	a5 91       	lpm	r26, Z+
 b9e:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
 ba0:	8c 55       	subi	r24, 0x5C	; 92
 ba2:	9f 4f       	sbci	r25, 0xFF	; 255
 ba4:	fc 01       	movw	r30, r24
 ba6:	c5 91       	lpm	r28, Z+
 ba8:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
 baa:	9f b7       	in	r25, 0x3f	; 63

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
 bac:	61 11       	cpse	r22, r1
 bae:	08 c0       	rjmp	.+16     	; 0xbc0 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
                cli();
 bb0:	f8 94       	cli
		*reg &= ~bit;
 bb2:	8c 91       	ld	r24, X
 bb4:	20 95       	com	r18
 bb6:	82 23       	and	r24, r18
 bb8:	8c 93       	st	X, r24
		*out &= ~bit;
 bba:	88 81       	ld	r24, Y
 bbc:	82 23       	and	r24, r18
 bbe:	0a c0       	rjmp	.+20     	; 0xbd4 <pinMode+0x5e>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 bc0:	62 30       	cpi	r22, 0x02	; 2
 bc2:	51 f4       	brne	.+20     	; 0xbd8 <pinMode+0x62>
		uint8_t oldSREG = SREG;
                cli();
 bc4:	f8 94       	cli
		*reg &= ~bit;
 bc6:	8c 91       	ld	r24, X
 bc8:	32 2f       	mov	r19, r18
 bca:	30 95       	com	r19
 bcc:	83 23       	and	r24, r19
 bce:	8c 93       	st	X, r24
		*out |= bit;
 bd0:	88 81       	ld	r24, Y
 bd2:	82 2b       	or	r24, r18
 bd4:	88 83       	st	Y, r24
 bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <pinMode+0x6a>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
                cli();
 bd8:	f8 94       	cli
		*reg |= bit;
 bda:	8c 91       	ld	r24, X
 bdc:	82 2b       	or	r24, r18
 bde:	8c 93       	st	X, r24
		SREG = oldSREG;
 be0:	9f bf       	out	0x3f, r25	; 63
	}
}
 be2:	df 91       	pop	r29
 be4:	cf 91       	pop	r28
 be6:	08 95       	ret

00000be8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 be8:	0f 93       	push	r16
 bea:	1f 93       	push	r17
 bec:	cf 93       	push	r28
 bee:	df 93       	push	r29
 bf0:	1f 92       	push	r1
 bf2:	cd b7       	in	r28, 0x3d	; 61
 bf4:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
 bf6:	28 2f       	mov	r18, r24
 bf8:	30 e0       	ldi	r19, 0x00	; 0
 bfa:	f9 01       	movw	r30, r18
 bfc:	e8 59       	subi	r30, 0x98	; 152
 bfe:	ff 4f       	sbci	r31, 0xFF	; 255
 c00:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 c02:	f9 01       	movw	r30, r18
 c04:	e4 58       	subi	r30, 0x84	; 132
 c06:	ff 4f       	sbci	r31, 0xFF	; 255
 c08:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
 c0a:	f9 01       	movw	r30, r18
 c0c:	e0 57       	subi	r30, 0x70	; 112
 c0e:	ff 4f       	sbci	r31, 0xFF	; 255
 c10:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 c12:	00 23       	and	r16, r16
 c14:	c1 f0       	breq	.+48     	; 0xc46 <digitalWrite+0x5e>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 c16:	88 23       	and	r24, r24
 c18:	19 f0       	breq	.+6      	; 0xc20 <digitalWrite+0x38>
 c1a:	69 83       	std	Y+1, r22	; 0x01
 c1c:	83 df       	rcall	.-250    	; 0xb24 <turnOffPWM>
 c1e:	69 81       	ldd	r22, Y+1	; 0x01
 c20:	e0 2f       	mov	r30, r16

	out = portOutputRegister(port);
 c22:	f0 e0       	ldi	r31, 0x00	; 0
 c24:	ee 0f       	add	r30, r30
 c26:	ff 1f       	adc	r31, r31
 c28:	ec 55       	subi	r30, 0x5C	; 92
 c2a:	ff 4f       	sbci	r31, 0xFF	; 255
 c2c:	a5 91       	lpm	r26, Z+
 c2e:	b4 91       	lpm	r27, Z
 c30:	9f b7       	in	r25, 0x3f	; 63

	uint8_t oldSREG = SREG;
 c32:	f8 94       	cli
	cli();
 c34:	8c 91       	ld	r24, X

	if (val == LOW) {
		*out &= ~bit;
 c36:	61 11       	cpse	r22, r1
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
 c38:	03 c0       	rjmp	.+6      	; 0xc40 <digitalWrite+0x58>
 c3a:	10 95       	com	r17
		*out &= ~bit;
 c3c:	81 23       	and	r24, r17
 c3e:	01 c0       	rjmp	.+2      	; 0xc42 <digitalWrite+0x5a>
 c40:	81 2b       	or	r24, r17
	} else {
		*out |= bit;
 c42:	8c 93       	st	X, r24
 c44:	9f bf       	out	0x3f, r25	; 63
	}

	SREG = oldSREG;
 c46:	0f 90       	pop	r0
}
 c48:	df 91       	pop	r29
 c4a:	cf 91       	pop	r28
 c4c:	1f 91       	pop	r17
 c4e:	0f 91       	pop	r16
 c50:	08 95       	ret

00000c52 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 c52:	08 95       	ret

00000c54 <__mulsi3>:
 c54:	db 01       	movw	r26, r22
 c56:	8f 93       	push	r24
 c58:	9f 93       	push	r25
 c5a:	49 d0       	rcall	.+146    	; 0xcee <__muluhisi3>
 c5c:	bf 91       	pop	r27
 c5e:	af 91       	pop	r26
 c60:	a2 9f       	mul	r26, r18
 c62:	80 0d       	add	r24, r0
 c64:	91 1d       	adc	r25, r1
 c66:	a3 9f       	mul	r26, r19
 c68:	90 0d       	add	r25, r0
 c6a:	b2 9f       	mul	r27, r18
 c6c:	90 0d       	add	r25, r0
 c6e:	11 24       	eor	r1, r1
 c70:	08 95       	ret

00000c72 <__udivmodsi4>:
 c72:	a1 e2       	ldi	r26, 0x21	; 33
 c74:	1a 2e       	mov	r1, r26
 c76:	aa 1b       	sub	r26, r26
 c78:	bb 1b       	sub	r27, r27
 c7a:	fd 01       	movw	r30, r26
 c7c:	0d c0       	rjmp	.+26     	; 0xc98 <__udivmodsi4_ep>

00000c7e <__udivmodsi4_loop>:
 c7e:	aa 1f       	adc	r26, r26
 c80:	bb 1f       	adc	r27, r27
 c82:	ee 1f       	adc	r30, r30
 c84:	ff 1f       	adc	r31, r31
 c86:	a2 17       	cp	r26, r18
 c88:	b3 07       	cpc	r27, r19
 c8a:	e4 07       	cpc	r30, r20
 c8c:	f5 07       	cpc	r31, r21
 c8e:	20 f0       	brcs	.+8      	; 0xc98 <__udivmodsi4_ep>
 c90:	a2 1b       	sub	r26, r18
 c92:	b3 0b       	sbc	r27, r19
 c94:	e4 0b       	sbc	r30, r20
 c96:	f5 0b       	sbc	r31, r21

00000c98 <__udivmodsi4_ep>:
 c98:	66 1f       	adc	r22, r22
 c9a:	77 1f       	adc	r23, r23
 c9c:	88 1f       	adc	r24, r24
 c9e:	99 1f       	adc	r25, r25
 ca0:	1a 94       	dec	r1
 ca2:	69 f7       	brne	.-38     	; 0xc7e <__udivmodsi4_loop>
 ca4:	60 95       	com	r22
 ca6:	70 95       	com	r23
 ca8:	80 95       	com	r24
 caa:	90 95       	com	r25
 cac:	9b 01       	movw	r18, r22
 cae:	ac 01       	movw	r20, r24
 cb0:	bd 01       	movw	r22, r26
 cb2:	cf 01       	movw	r24, r30
 cb4:	08 95       	ret

00000cb6 <__divmodsi4>:
 cb6:	05 2e       	mov	r0, r21
 cb8:	97 fb       	bst	r25, 7
 cba:	16 f4       	brtc	.+4      	; 0xcc0 <__divmodsi4+0xa>
 cbc:	00 94       	com	r0
 cbe:	0f d0       	rcall	.+30     	; 0xcde <__negsi2>
 cc0:	57 fd       	sbrc	r21, 7
 cc2:	05 d0       	rcall	.+10     	; 0xcce <__divmodsi4_neg2>
 cc4:	d6 df       	rcall	.-84     	; 0xc72 <__udivmodsi4>
 cc6:	07 fc       	sbrc	r0, 7
 cc8:	02 d0       	rcall	.+4      	; 0xcce <__divmodsi4_neg2>
 cca:	46 f4       	brtc	.+16     	; 0xcdc <__divmodsi4_exit>
 ccc:	08 c0       	rjmp	.+16     	; 0xcde <__negsi2>

00000cce <__divmodsi4_neg2>:
 cce:	50 95       	com	r21
 cd0:	40 95       	com	r20
 cd2:	30 95       	com	r19
 cd4:	21 95       	neg	r18
 cd6:	3f 4f       	sbci	r19, 0xFF	; 255
 cd8:	4f 4f       	sbci	r20, 0xFF	; 255
 cda:	5f 4f       	sbci	r21, 0xFF	; 255

00000cdc <__divmodsi4_exit>:
 cdc:	08 95       	ret

00000cde <__negsi2>:
 cde:	90 95       	com	r25
 ce0:	80 95       	com	r24
 ce2:	70 95       	com	r23
 ce4:	61 95       	neg	r22
 ce6:	7f 4f       	sbci	r23, 0xFF	; 255
 ce8:	8f 4f       	sbci	r24, 0xFF	; 255
 cea:	9f 4f       	sbci	r25, 0xFF	; 255
 cec:	08 95       	ret

00000cee <__muluhisi3>:
 cee:	0f d0       	rcall	.+30     	; 0xd0e <__umulhisi3>
 cf0:	a5 9f       	mul	r26, r21
 cf2:	90 0d       	add	r25, r0
 cf4:	b4 9f       	mul	r27, r20
 cf6:	90 0d       	add	r25, r0
 cf8:	a4 9f       	mul	r26, r20
 cfa:	80 0d       	add	r24, r0
 cfc:	91 1d       	adc	r25, r1
 cfe:	11 24       	eor	r1, r1
 d00:	08 95       	ret

00000d02 <__tablejump2__>:
 d02:	ee 0f       	add	r30, r30
 d04:	ff 1f       	adc	r31, r31

00000d06 <__tablejump__>:
 d06:	05 90       	lpm	r0, Z+
 d08:	f4 91       	lpm	r31, Z
 d0a:	e0 2d       	mov	r30, r0
 d0c:	09 94       	ijmp

00000d0e <__umulhisi3>:
 d0e:	a2 9f       	mul	r26, r18
 d10:	b0 01       	movw	r22, r0
 d12:	b3 9f       	mul	r27, r19
 d14:	c0 01       	movw	r24, r0
 d16:	a3 9f       	mul	r26, r19
 d18:	70 0d       	add	r23, r0
 d1a:	81 1d       	adc	r24, r1
 d1c:	11 24       	eor	r1, r1
 d1e:	91 1d       	adc	r25, r1
 d20:	b2 9f       	mul	r27, r18
 d22:	70 0d       	add	r23, r0
 d24:	81 1d       	adc	r24, r1
 d26:	11 24       	eor	r1, r1
 d28:	91 1d       	adc	r25, r1
 d2a:	08 95       	ret

00000d2c <_exit>:
 d2c:	f8 94       	cli

00000d2e <__stop_program>:
 d2e:	ff cf       	rjmp	.-2      	; 0xd2e <__stop_program>
